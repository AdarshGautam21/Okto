import * as _polkadot_api_substrate_bindings from '@polkadot-api/substrate-bindings';
import { V15, Decoder, Codec, SS58String, Encoder } from '@polkadot-api/substrate-bindings';
import * as rxjs from 'rxjs';
import { Observable } from 'rxjs';
import { getChecksumBuilder, getDynamicBuilder } from '@polkadot-api/metadata-builders';
import * as _polkadot_api_substrate_client from '@polkadot-api/substrate-client';
import { ChainHead, FollowEventWithRuntime, StorageResult, StorageItemInput, SubstrateClient } from '@polkadot-api/substrate-client';
export { FollowEventWithRuntime } from '@polkadot-api/substrate-client';

type SystemEvent = {
    phase: {
        type: "ApplyExtrinsic";
        value: number;
    } | {
        type: "Finalization";
    } | {
        type: "Initialization";
    };
    event: {
        type: string;
        value: {
            type: string;
            value: any;
        };
    };
    topics: Array<any>;
};
interface RuntimeContext {
    metadataRaw: Uint8Array;
    metadata: V15;
    checksumBuilder: ReturnType<typeof getChecksumBuilder>;
    dynamicBuilder: ReturnType<typeof getDynamicBuilder>;
    events: {
        key: string;
        dec: Decoder<Array<SystemEvent>>;
    };
    accountId: Codec<SS58String>;
    asset: [Encoder<any>, string | null];
}
interface Runtime {
    at: string;
    runtime: Observable<RuntimeContext>;
    addBlock: (block: string) => Runtime;
    deleteBlocks: (blocks: string[]) => number;
    usages: Set<string>;
}

interface PinnedBlock {
    hash: string;
    number: number;
    parent: string;
    children: Set<string>;
    runtime: string;
    refCount: number;
    unpinned?: true;
    recovering: boolean;
}
type PinnedBlocks = {
    best: string;
    finalized: string;
    runtimes: Record<string, Runtime>;
    blocks: Map<string, PinnedBlock>;
    finalizedRuntime: Runtime;
    recovering: boolean;
};

type TrackedTx = {
    type: "bestChainBlockIncluded";
    block: {
        hash: string;
        index: number;
    };
} | {
    type: "finalized";
    block: {
        hash: string;
        index: number;
    };
};
declare const getTrackTx: (blocks$: Observable<PinnedBlocks>, getBody: (block: string) => Observable<string[]>) => (tx: string) => Observable<TrackedTx>;

type BlockInfo = {
    hash: string;
    number: number;
    parent: string;
};
declare const getChainHead$: (chainHead: ChainHead) => {
    follow$: Observable<FollowEventWithRuntime>;
    finalized$: Observable<BlockInfo>;
    best$: Observable<BlockInfo>;
    bestBlocks$: Observable<BlockInfo[]>;
    runtime$: Observable<RuntimeContext | null>;
    metadata$: Observable<{
        lookup: {
            id: number;
            path: string[];
            params: {
                name: string;
                type: number | undefined;
            }[];
            def: {
                tag: "composite";
                value: {
                    name: string | undefined;
                    type: number;
                    typeName: string | undefined;
                    docs: string[];
                }[];
            } | {
                tag: "variant";
                value: {
                    name: string;
                    fields: {
                        name: string | undefined;
                        type: number;
                        typeName: string | undefined;
                        docs: string[];
                    }[];
                    index: number;
                    docs: string[];
                }[];
            } | {
                tag: "sequence";
                value: number;
            } | {
                tag: "array";
                value: {
                    len: number;
                    type: number;
                };
            } | {
                tag: "tuple";
                value: number[];
            } | {
                tag: "primitive";
                value: {
                    tag: "bool";
                    value: undefined;
                } | {
                    tag: "char";
                    value: undefined;
                } | {
                    tag: "str";
                    value: undefined;
                } | {
                    tag: "u8";
                    value: undefined;
                } | {
                    tag: "u16";
                    value: undefined;
                } | {
                    tag: "u32";
                    value: undefined;
                } | {
                    tag: "u64";
                    value: undefined;
                } | {
                    tag: "u128";
                    value: undefined;
                } | {
                    tag: "u256";
                    value: undefined;
                } | {
                    tag: "i8";
                    value: undefined;
                } | {
                    tag: "i16";
                    value: undefined;
                } | {
                    tag: "i32";
                    value: undefined;
                } | {
                    tag: "i64";
                    value: undefined;
                } | {
                    tag: "i128";
                    value: undefined;
                } | {
                    tag: "i256";
                    value: undefined;
                };
            } | {
                tag: "compact";
                value: number;
            } | {
                tag: "bitSequence";
                value: {
                    bitStoreType: number;
                    bitOrderType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            name: string;
            storage: {
                prefix: string;
                items: {
                    name: string;
                    modifier: number;
                    type: {
                        tag: "map";
                        value: {
                            hashers: ({
                                tag: "Blake2128";
                                value: undefined;
                            } | {
                                tag: "Blake2256";
                                value: undefined;
                            } | {
                                tag: "Blake2128Concat";
                                value: undefined;
                            } | {
                                tag: "Twox128";
                                value: undefined;
                            } | {
                                tag: "Twox256";
                                value: undefined;
                            } | {
                                tag: "Twox64Concat";
                                value: undefined;
                            } | {
                                tag: "Identity";
                                value: undefined;
                            })[];
                            key: number;
                            value: number;
                        };
                    } | {
                        tag: "plain";
                        value: number;
                    };
                    fallback: _polkadot_api_substrate_bindings.HexString;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            events: number | undefined;
            constants: {
                name: string;
                type: number;
                value: _polkadot_api_substrate_bindings.HexString;
                docs: string[];
            }[];
            errors: number | undefined;
            index: number;
            docs: string[];
        }[];
        extrinsic: {
            version: number;
            address: number;
            call: number;
            signature: number;
            extra: number;
            signedExtensions: {
                identifier: string;
                type: number;
                additionalSigned: number;
            }[];
        };
        type: number;
        apis: {
            name: string;
            methods: {
                name: string;
                inputs: {
                    name: string;
                    type: number;
                }[];
                output: number;
                docs: string[];
            }[];
            docs: string[];
        }[];
        outerEnums: {
            call: number;
            event: number;
            error: number;
        };
        custom: [string, {
            type: number;
            value: _polkadot_api_substrate_bindings.HexString;
        }][];
    } | null>;
    header$: (hash: string | null) => Observable<{
        parentHash: _polkadot_api_substrate_bindings.HexString;
        number: number;
        stateRoot: _polkadot_api_substrate_bindings.HexString;
        extrinsicRoot: _polkadot_api_substrate_bindings.HexString;
        digests: _polkadot_api_substrate_bindings.Enum<{
            type: "consensus";
            value: {
                engine: string;
                payload: _polkadot_api_substrate_bindings.HexString;
            };
        } | {
            type: "seal";
            value: {
                engine: string;
                payload: _polkadot_api_substrate_bindings.HexString;
            };
        } | {
            type: "preRuntime";
            value: {
                engine: string;
                payload: _polkadot_api_substrate_bindings.HexString;
            };
        } | {
            type: "runtimeUpdated";
            value: undefined;
        }>[];
    }>;
    body$: (hash: string) => Observable<string[]>;
    call$: (hash: string | null, fnName: string, callParameters: string) => Observable<string>;
    storage$: <Type extends "value" | "hash" | "closestDescendantMerkleValue" | "descendantsValues" | "descendantsHashes", T>(hash: string | null, type: Type, keyMapper: (ctx: RuntimeContext) => string, childTrie?: string | null | undefined, mapper?: ((data: StorageResult<Type>, ctx: RuntimeContext) => T) | undefined) => Observable<unknown extends T ? StorageResult<Type> : T>;
    storageQueries$: (hash: string | null, queries: StorageItemInput[], childTrie?: string | undefined) => Observable<_polkadot_api_substrate_client.StorageItemResponse>;
    eventsAt$: (hash: string | null) => Observable<SystemEvent[]>;
    validateTx$: (tx: string, blockHash: string) => Observable<boolean>;
    trackTx$: (tx: string) => Observable<TrackedTx>;
    withRuntime: <T_1>(mapper: (x: T_1) => string) => (source$: Observable<T_1>) => Observable<[T_1, RuntimeContext]>;
    getRuntimeContext$: (hash: string | null) => Observable<RuntimeContext>;
    unfollow: () => void;
};
type ChainHead$ = ReturnType<typeof getChainHead$>;

declare class BlockNotPinnedError extends Error {
    constructor();
}
declare class BlockPrunedError extends Error {
    constructor();
}
declare class NotBestBlockError extends Error {
    constructor();
}

declare const getObservableClient: ({ chainHead, transaction, destroy, }: SubstrateClient) => {
    chainHead$: () => {
        follow$: rxjs.Observable<_polkadot_api_substrate_client.FollowEventWithRuntime>;
        finalized$: rxjs.Observable<BlockInfo>;
        best$: rxjs.Observable<BlockInfo>;
        bestBlocks$: rxjs.Observable<BlockInfo[]>;
        runtime$: rxjs.Observable<RuntimeContext | null>;
        metadata$: rxjs.Observable<{
            lookup: {
                id: number;
                path: string[];
                params: {
                    name: string;
                    type: number | undefined;
                }[];
                def: {
                    tag: "composite";
                    value: {
                        name: string | undefined;
                        type: number;
                        typeName: string | undefined;
                        docs: string[];
                    }[];
                } | {
                    tag: "variant";
                    value: {
                        name: string;
                        fields: {
                            name: string | undefined;
                            type: number;
                            typeName: string | undefined;
                            docs: string[];
                        }[];
                        index: number;
                        docs: string[];
                    }[];
                } | {
                    tag: "sequence";
                    value: number;
                } | {
                    tag: "array";
                    value: {
                        len: number;
                        type: number;
                    };
                } | {
                    tag: "tuple";
                    value: number[];
                } | {
                    tag: "primitive";
                    value: {
                        tag: "bool";
                        value: undefined;
                    } | {
                        tag: "char";
                        value: undefined;
                    } | {
                        tag: "str";
                        value: undefined;
                    } | {
                        tag: "u8";
                        value: undefined;
                    } | {
                        tag: "u16";
                        value: undefined;
                    } | {
                        tag: "u32";
                        value: undefined;
                    } | {
                        tag: "u64";
                        value: undefined;
                    } | {
                        tag: "u128";
                        value: undefined;
                    } | {
                        tag: "u256";
                        value: undefined;
                    } | {
                        tag: "i8";
                        value: undefined;
                    } | {
                        tag: "i16";
                        value: undefined;
                    } | {
                        tag: "i32";
                        value: undefined;
                    } | {
                        tag: "i64";
                        value: undefined;
                    } | {
                        tag: "i128";
                        value: undefined;
                    } | {
                        tag: "i256";
                        value: undefined;
                    };
                } | {
                    tag: "compact";
                    value: number;
                } | {
                    tag: "bitSequence";
                    value: {
                        bitStoreType: number;
                        bitOrderType: number;
                    };
                };
                docs: string[];
            }[];
            pallets: {
                name: string;
                storage: {
                    prefix: string;
                    items: {
                        name: string;
                        modifier: number;
                        type: {
                            tag: "map";
                            value: {
                                hashers: ({
                                    tag: "Blake2128";
                                    value: undefined;
                                } | {
                                    tag: "Blake2256";
                                    value: undefined;
                                } | {
                                    tag: "Blake2128Concat";
                                    value: undefined;
                                } | {
                                    tag: "Twox128";
                                    value: undefined;
                                } | {
                                    tag: "Twox256";
                                    value: undefined;
                                } | {
                                    tag: "Twox64Concat";
                                    value: undefined;
                                } | {
                                    tag: "Identity";
                                    value: undefined;
                                })[];
                                key: number;
                                value: number;
                            };
                        } | {
                            tag: "plain";
                            value: number;
                        };
                        fallback: _polkadot_api_substrate_bindings.HexString;
                        docs: string[];
                    }[];
                } | undefined;
                calls: number | undefined;
                events: number | undefined;
                constants: {
                    name: string;
                    type: number;
                    value: _polkadot_api_substrate_bindings.HexString;
                    docs: string[];
                }[];
                errors: number | undefined;
                index: number;
                docs: string[];
            }[];
            extrinsic: {
                version: number;
                address: number;
                call: number;
                signature: number;
                extra: number;
                signedExtensions: {
                    identifier: string;
                    type: number;
                    additionalSigned: number;
                }[];
            };
            type: number;
            apis: {
                name: string;
                methods: {
                    name: string;
                    inputs: {
                        name: string;
                        type: number;
                    }[];
                    output: number;
                    docs: string[];
                }[];
                docs: string[];
            }[];
            outerEnums: {
                call: number;
                event: number;
                error: number;
            };
            custom: [string, {
                type: number;
                value: _polkadot_api_substrate_bindings.HexString;
            }][];
        } | null>;
        header$: (hash: string | null) => rxjs.Observable<{
            parentHash: _polkadot_api_substrate_bindings.HexString;
            number: number;
            stateRoot: _polkadot_api_substrate_bindings.HexString;
            extrinsicRoot: _polkadot_api_substrate_bindings.HexString;
            digests: _polkadot_api_substrate_bindings.Enum<{
                type: "consensus";
                value: {
                    engine: string;
                    payload: _polkadot_api_substrate_bindings.HexString;
                };
            } | {
                type: "seal";
                value: {
                    engine: string;
                    payload: _polkadot_api_substrate_bindings.HexString;
                };
            } | {
                type: "preRuntime";
                value: {
                    engine: string;
                    payload: _polkadot_api_substrate_bindings.HexString;
                };
            } | {
                type: "runtimeUpdated";
                value: undefined;
            }>[];
        }>;
        body$: (hash: string) => rxjs.Observable<string[]>;
        call$: (hash: string | null, fnName: string, callParameters: string) => rxjs.Observable<string>;
        storage$: <Type extends "value" | "hash" | "closestDescendantMerkleValue" | "descendantsValues" | "descendantsHashes", T>(hash: string | null, type: Type, keyMapper: (ctx: RuntimeContext) => string, childTrie?: string | null | undefined, mapper?: ((data: _polkadot_api_substrate_client.StorageResult<Type>, ctx: RuntimeContext) => T) | undefined) => rxjs.Observable<unknown extends T ? _polkadot_api_substrate_client.StorageResult<Type> : T>;
        storageQueries$: (hash: string | null, queries: _polkadot_api_substrate_client.StorageItemInput[], childTrie?: string | undefined) => rxjs.Observable<_polkadot_api_substrate_client.StorageItemResponse>;
        eventsAt$: (hash: string | null) => rxjs.Observable<SystemEvent[]>;
        validateTx$: (tx: string, blockHash: string) => rxjs.Observable<boolean>;
        trackTx$: (tx: string) => rxjs.Observable<TrackedTx>;
        withRuntime: <T_1>(mapper: (x: T_1) => string) => (source$: rxjs.Observable<T_1>) => rxjs.Observable<[T_1, RuntimeContext]>;
        getRuntimeContext$: (hash: string | null) => rxjs.Observable<RuntimeContext>;
        unfollow: () => void;
    };
    broadcastTx$: (transaction: string) => rxjs.Observable<never>;
    destroy: _polkadot_api_substrate_client.UnsubscribeFn;
};

export { type BlockInfo, BlockNotPinnedError, BlockPrunedError, type ChainHead$, NotBestBlockError, type RuntimeContext, type SystemEvent, type TrackedTx, getChainHead$, getObservableClient, getTrackTx };
