{"version":3,"sources":["../../src/index.ts","../../src/lookups.ts","../../src/dynamic-builder.ts","../../src/with-cache.ts","../../src/checksum-builder.ts"],"sourcesContent":["export * from \"./lookups\"\nexport * from \"./dynamic-builder\"\nexport * from \"./checksum-builder\"\n","import type { StringRecord, V14Lookup } from \"@polkadot-api/substrate-bindings\"\n\nexport type MetadataPrimitives =\n  | \"bool\"\n  | \"char\"\n  | \"str\"\n  | \"u8\"\n  | \"u16\"\n  | \"u32\"\n  | \"u64\"\n  | \"u128\"\n  | \"u256\"\n  | \"i8\"\n  | \"i16\"\n  | \"i32\"\n  | \"i64\"\n  | \"i128\"\n  | \"i256\"\n\nexport type PrimitiveVar = {\n  type: \"primitive\"\n  value: MetadataPrimitives\n}\n\nexport type VoidVar = { type: \"void\" }\nexport type CompactVar = { type: \"compact\"; isBig: boolean | null }\nexport type BitSequenceVar = { type: \"bitSequence\" }\nexport type AccountId32 = { type: \"AccountId32\" }\nexport type TerminalVar =\n  | PrimitiveVar\n  | VoidVar\n  | CompactVar\n  | BitSequenceVar\n  | AccountId32\n\n/* Array-like vars:\n * - TupleVar: Mixed types, fixed length\n * - Sequence: One type, arbitrary length\n * - Array: One type, fixed length\n */\nexport type TupleVar = {\n  type: \"tuple\"\n  value: LookupEntry[]\n  innerDocs: Array<string[]>\n}\nexport type StructVar = {\n  type: \"struct\"\n  value: StringRecord<LookupEntry>\n  innerDocs: StringRecord<string[]>\n}\nexport type EnumVar = {\n  type: \"enum\"\n  value: StringRecord<\n    (\n      | { type: \"lookupEntry\"; value: LookupEntry }\n      | VoidVar\n      | TupleVar\n      | StructVar\n    ) & { idx: number }\n  >\n  innerDocs: StringRecord<string[]>\n}\nexport type OptionVar = {\n  type: \"option\"\n  value: LookupEntry\n}\nexport type ResultVar = {\n  type: \"result\"\n  value: { ok: LookupEntry; ko: LookupEntry }\n}\nexport type SequenceVar = {\n  type: \"sequence\"\n  value: LookupEntry\n}\nexport type ArrayVar = {\n  type: \"array\"\n  value: LookupEntry\n  len: number\n}\n\nexport type ComposedVar =\n  | TupleVar\n  | StructVar\n  | SequenceVar\n  | ArrayVar\n  | OptionVar\n  | ResultVar\n  | EnumVar\n\nexport type Var = TerminalVar | ComposedVar\n\nexport type LookupEntry = {\n  id: number\n} & Var\n\nexport const getLookupFn = (lookupData: V14Lookup) => {\n  const lookups = new Map<number, LookupEntry>()\n  const from = new Set<number>()\n\n  const withCache = (\n    fn: (id: number) => Var,\n  ): ((id: number) => LookupEntry) => {\n    return (id) => {\n      let entry = lookups.get(id)\n\n      if (entry) return entry\n\n      if (from.has(id)) {\n        const entry = {\n          id,\n        } as LookupEntry\n\n        lookups.set(id, entry)\n        return entry\n      }\n\n      from.add(id)\n      const value = fn(id)\n      entry = lookups.get(id)\n\n      if (entry) {\n        Object.assign(entry, value)\n      } else {\n        entry = {\n          id,\n          ...value,\n        }\n        lookups.set(id, entry!)\n      }\n      from.delete(id)\n      return entry\n    }\n  }\n\n  let isAccountId32SearchOn = true\n  const getLookupEntryDef = withCache((id): Var => {\n    const { def, path, params } = lookupData[id]\n\n    if (def.tag === \"composite\") {\n      if (def.value.length === 0) return { type: \"void\" }\n\n      // used to be a \"pointer\"\n      if (def.value.length === 1) {\n        if (\n          isAccountId32SearchOn &&\n          path.join(\",\") === \"sp_core,crypto,AccountId32\"\n        ) {\n          isAccountId32SearchOn = false\n          return { type: \"AccountId32\" }\n        }\n        return getLookupEntryDef(def.value[0].type as number)\n      }\n\n      let allKey = true\n\n      const values: Record<string | number, LookupEntry> = {}\n      const innerDocs: Record<string | number, string[]> = {}\n      def.value.forEach((x, idx) => {\n        allKey = allKey && !!x.name\n        const key = x.name || idx\n        values[key] = getLookupEntryDef(x.type)\n        innerDocs[key] = x.docs\n      })\n\n      return allKey\n        ? {\n            type: \"struct\",\n            value: values as StringRecord<LookupEntry>,\n            innerDocs: innerDocs as StringRecord<string[]>,\n          }\n        : {\n            type: \"tuple\",\n            value: Object.values(values),\n            innerDocs: Object.values(innerDocs),\n          }\n    }\n\n    if (def.tag === \"variant\") {\n      if (\n        path.length === 1 &&\n        path[0] === \"Option\" &&\n        params.length === 1 &&\n        params[0].name === \"T\"\n      ) {\n        const value = getLookupEntryDef(params[0].type!)\n        return value.type === \"void\"\n          ? // Option<void> would return a Codec<undefined> which makes no sense\n            // Therefore, we better treat it as a bool\n            { type: \"primitive\", value: \"bool\" }\n          : {\n              type: \"option\",\n              value,\n            }\n      }\n\n      if (\n        path.length === 1 &&\n        path[0] === \"Result\" &&\n        params.length === 2 &&\n        params[0].name === \"T\" &&\n        params[1].name === \"E\"\n      ) {\n        return {\n          type: \"result\",\n          value: {\n            ok: getLookupEntryDef(params[0].type as number),\n            ko: getLookupEntryDef(params[1].type as number),\n          },\n        }\n      }\n      if (def.value.length === 0) return { type: \"void\" }\n\n      const enumValue: StringRecord<EnumVar[\"value\"][keyof EnumVar[\"value\"]]> =\n        {}\n      const enumDocs: StringRecord<string[]> = {}\n\n      def.value.forEach((x) => {\n        const key = x.name\n        enumDocs[key] = x.docs\n\n        if (x.fields.length === 0) {\n          enumValue[key] = { type: \"void\", idx: x.index }\n          return\n        }\n\n        if (x.fields.length === 1 && !x.fields[0].name) {\n          enumValue[key] = {\n            type: \"lookupEntry\",\n            value: getLookupEntryDef(x.fields[0].type),\n            idx: x.index,\n          }\n          return\n        }\n\n        let allKey = true\n\n        const values: Record<string | number, LookupEntry> = {}\n        const innerDocs: Record<string | number, string[]> = {}\n\n        x.fields.forEach((x, idx) => {\n          allKey = allKey && !!x.name\n          const key = x.name || idx\n          values[key] = getLookupEntryDef(x.type as number)\n          innerDocs[key] = x.docs\n        })\n\n        enumValue[key] = allKey\n          ? {\n              type: \"struct\",\n              value: values as StringRecord<LookupEntry>,\n              innerDocs: innerDocs as StringRecord<string[]>,\n              idx: x.index,\n            }\n          : {\n              type: \"tuple\",\n              value: Object.values(values),\n              innerDocs: Object.values(innerDocs),\n              idx: x.index,\n            }\n      })\n\n      return {\n        type: \"enum\",\n        value: enumValue,\n        innerDocs: enumDocs,\n      }\n    }\n\n    if (def.tag === \"sequence\") {\n      const value = getLookupEntryDef(def.value as number)\n      return {\n        type: \"sequence\",\n        value,\n      }\n    }\n\n    if (def.tag === \"array\") {\n      const { len } = def.value\n      const value = getLookupEntryDef(def.value.type)\n\n      if (len === 0) return { type: \"void\" }\n      if (len === 1) return value\n\n      return {\n        type: \"array\",\n        value,\n        len: def.value.len,\n      }\n    }\n\n    if (def.tag === \"tuple\") {\n      if (def.value.length === 0) return { type: \"void\" }\n\n      // use to be a \"pointer\"\n      if (def.value.length === 1)\n        return getLookupEntryDef(def.value[0] as number)\n\n      const value = def.value.map((x) => getLookupEntryDef(x as number))\n      const innerDocs = def.value.map((x) => lookupData[x].docs)\n\n      const areAllSame = value.every((v) => v.id === value[0].id)\n      if (areAllSame && innerDocs.every((doc) => doc.length === 0)) {\n        return {\n          type: \"array\",\n          value: value[0],\n          len: value.length,\n        }\n      }\n\n      return {\n        type: \"tuple\",\n        value,\n        innerDocs,\n      }\n    }\n\n    if (def.tag === \"primitive\") {\n      return {\n        type: \"primitive\",\n        value: def.value.tag,\n      }\n    }\n\n    if (def.tag === \"compact\") {\n      const translated = getLookupEntryDef(def.value) as PrimitiveVar | VoidVar\n      if (translated.type === \"void\") return { type: \"compact\", isBig: null }\n\n      const isBig = Number(translated.value.slice(1)) > 32\n\n      return {\n        type: \"compact\",\n        isBig,\n      }\n    }\n\n    // bitSequence\n    return {\n      type: def.tag,\n    }\n  })\n\n  return getLookupEntryDef\n}\n","import type { Codec, StringRecord, V15 } from \"@polkadot-api/substrate-bindings\"\nimport type { EnumVar, LookupEntry, TupleVar } from \"./lookups\"\nimport { getLookupFn } from \"./lookups\"\nimport * as scale from \"@polkadot-api/substrate-bindings\"\nimport { withCache } from \"./with-cache\"\nimport { mapObject } from \"@polkadot-api/utils\"\n\nconst _bytes = scale.Bin()\n\nconst _buildCodec = (\n  input: LookupEntry,\n  cache: Map<number, Codec<any>>,\n  stack: Set<number>,\n  _accountId: Codec<scale.SS58String>,\n): Codec<any> => {\n  if (input.type === \"primitive\") return scale[input.value]\n  if (input.type === \"void\") return scale._void\n  if (input.type === \"AccountId32\") return _accountId\n  if (input.type === \"compact\") return scale.compact\n  if (input.type === \"bitSequence\") return scale.bitSequence\n\n  const buildNextCodec = (nextInput: LookupEntry): Codec<any> =>\n    buildCodec(nextInput, cache, stack, _accountId)\n\n  const buildVector = (inner: LookupEntry, len?: number) => {\n    const innerCodec = buildNextCodec(inner)\n    return len ? scale.Vector(innerCodec, len) : scale.Vector(innerCodec)\n  }\n\n  const buildTuple = (value: LookupEntry[]) =>\n    scale.Tuple(...value.map(buildNextCodec))\n\n  const buildStruct = (value: StringRecord<LookupEntry>) => {\n    const inner = Object.fromEntries(\n      Object.entries(value).map(([key, value]) => [key, buildNextCodec(value)]),\n    ) as StringRecord<Codec<any>>\n    return scale.Struct(inner)\n  }\n\n  if (\n    input.type === \"sequence\" &&\n    input.value.type === \"primitive\" &&\n    input.value.value === \"u8\"\n  ) {\n    return _bytes\n  }\n\n  if (input.type === \"array\") {\n    // Bytes case\n    if (input.value.type === \"primitive\" && input.value.value === \"u8\")\n      return scale.Bin(input.len)\n\n    return buildVector(input.value, input.len)\n  }\n\n  if (input.type === \"sequence\") return buildVector(input.value)\n  if (input.type === \"tuple\") return buildTuple(input.value)\n  if (input.type === \"struct\") return buildStruct(input.value)\n\n  if (input.type === \"option\") return scale.Option(buildNextCodec(input.value))\n\n  if (input.type === \"result\")\n    return scale.Result(\n      buildNextCodec(input.value.ok),\n      buildNextCodec(input.value.ko),\n    )\n\n  // it has to be an enum by now\n  const dependencies = Object.values(input.value).map((v) => {\n    if (v.type === \"void\") return scale._void\n    if (v.type === \"lookupEntry\") return buildNextCodec(v.value)\n    return v.type === \"tuple\" ? buildTuple(v.value) : buildStruct(v.value)\n  })\n\n  const inner = Object.fromEntries(\n    Object.keys(input.value).map((key, idx) => {\n      return [key, dependencies[idx]]\n    }),\n  ) as StringRecord<Codec<any>>\n\n  const indexes = Object.values(input.value).map((x) => x.idx)\n  const areIndexesSorted = indexes.every((idx, i) => idx === i)\n\n  return areIndexesSorted\n    ? scale.Variant(inner)\n    : scale.Variant(inner, indexes as any)\n}\nconst buildCodec = withCache(_buildCodec, scale.Self, (res) => res)\n\nexport const getDynamicBuilder = (metadata: V15) => {\n  const lookupData = metadata.lookup\n  const getLookupEntryDef = getLookupFn(lookupData)\n  let _accountId = scale.AccountId()\n\n  const cache = new Map()\n  const buildDefinition = (id: number): Codec<any> =>\n    buildCodec(getLookupEntryDef(id), cache, new Set(), _accountId)\n\n  const prefix = metadata.pallets\n    .find((x) => x.name === \"System\")\n    ?.constants.find((x) => x.name === \"SS58Prefix\")\n\n  let ss58Prefix: number | undefined\n  if (prefix) {\n    try {\n      const prefixVal = buildDefinition(prefix.type).dec(prefix.value)\n      if (typeof prefixVal === \"number\") {\n        ss58Prefix = prefixVal\n        _accountId = scale.AccountId(prefixVal)\n      }\n    } catch (_) {}\n  }\n\n  const storagePallets = new Map<string, ReturnType<typeof scale.Storage>>()\n\n  const buildStorage = (pallet: string, entry: string) => {\n    let storagePallet = storagePallets.get(pallet)\n    if (!storagePallet)\n      storagePallets.set(pallet, (storagePallet = scale.Storage(pallet)))\n\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .storage!.items.find((s) => s.name === entry)!\n\n    const storageWithFallback = (\n      len: number,\n      ...args: Parameters<ReturnType<typeof scale.Storage>>\n    ) => {\n      const result = storagePallet!(...args)\n      return {\n        ...result,\n        len,\n        fallback:\n          storageEntry.modifier === 1\n            ? result.dec(storageEntry.fallback)\n            : undefined,\n      }\n    }\n\n    if (storageEntry.type.tag === \"plain\")\n      return storageWithFallback(\n        0,\n        entry,\n        buildDefinition(storageEntry.type.value).dec,\n      )\n\n    const { key, value, hashers } = storageEntry.type.value\n    const val = buildDefinition(value)\n    const hashes = hashers.map((x) => scale[x.tag])\n\n    const hashArgs: Array<scale.EncoderWithHash<any>> =\n      hashes.length === 1\n        ? [[buildDefinition(key), hashes[0]]]\n        : (getLookupEntryDef(key) as TupleVar).value.map(\n            (x, idx): scale.EncoderWithHash<any> => [\n              buildDefinition(x.id),\n              hashes[idx],\n            ],\n          )\n    return storageWithFallback(hashes.length, entry, val.dec, ...hashArgs)\n  }\n\n  const buildEnumEntry = (\n    entry: EnumVar[\"value\"][keyof EnumVar[\"value\"]],\n  ): Codec<any> => {\n    if (entry.type === \"void\") return scale._void\n    if (entry.type === \"lookupEntry\") return buildDefinition(entry.value.id)\n    return entry.type === \"tuple\"\n      ? scale.Tuple(\n          ...Object.values(entry.value).map((l) => buildDefinition(l.id)),\n        )\n      : scale.Struct(\n          mapObject(entry.value, (x) => buildDefinition(x.id)) as StringRecord<\n            Codec<any>\n          >,\n        )\n  }\n\n  const buildConstant = (pallet: string, constantName: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .constants!.find((s) => s.name === constantName)!\n\n    return buildDefinition(storageEntry.type as number)\n  }\n\n  const buildVariant =\n    (type: \"errors\" | \"events\" | \"calls\") =>\n    (\n      pallet: string,\n      name: string,\n    ): {\n      codec: Codec<any>\n      location: [number, number]\n    } => {\n      const palletEntry = metadata.pallets.find((x) => x.name === pallet)!\n      const lookup = getLookupEntryDef(palletEntry[type]!)\n      if (lookup.type !== \"enum\") throw null\n      const entry = lookup.value[name]\n\n      return {\n        location: [palletEntry.index, entry.idx],\n        codec: buildEnumEntry(lookup.value[name]),\n      }\n    }\n\n  const buildRuntimeCall = (api: string, method: string) => {\n    const entry = metadata.apis\n      .find((x) => x.name === api)\n      ?.methods.find((x) => x.name === method)\n    if (!entry) throw null\n\n    return {\n      args: scale.Tuple(...entry.inputs.map((x) => buildDefinition(x.type))),\n      value: buildDefinition(entry.output),\n    }\n  }\n\n  return {\n    buildDefinition,\n    buildStorage,\n    buildEvent: buildVariant(\"events\"),\n    buildError: buildVariant(\"errors\"),\n    buildRuntimeCall,\n    buildCall: buildVariant(\"calls\"),\n    buildConstant,\n    ss58Prefix,\n  }\n}\n","import { LookupEntry } from \"./lookups\"\n\ntype FnWithStack<Other extends Array<any>, T> = (\n  input: LookupEntry,\n  cache: Map<number, T>,\n  stack: Set<number>,\n  ...rest: Other\n) => T\n\nexport const withCache =\n  <Other extends Array<any>, T>(\n    fn: FnWithStack<Other, T>,\n    onEnterCircular: (\n      cacheGetter: () => T,\n      circular: LookupEntry,\n      ...rest: Other\n    ) => T,\n    onExitCircular: (\n      outter: T,\n      inner: T,\n      circular: LookupEntry,\n      ...rest: Other\n    ) => T,\n  ): FnWithStack<Other, T> =>\n  (input, cache, stack, ...rest) => {\n    const { id } = input\n    if (cache.has(id)) return cache.get(id)!\n\n    if (stack.has(id)) {\n      const res = onEnterCircular(() => cache.get(id)!, input, ...rest)\n      cache.set(id, res)\n      return res\n    }\n\n    stack.add(id)\n    let result = fn(input, cache, stack, ...rest)\n    stack.delete(id)\n\n    if (cache.has(id))\n      result = onExitCircular(result, cache.get(id)!, input, ...rest)\n\n    cache.set(id, result)\n    return result\n  }\n","import type { StringRecord, V15 } from \"@polkadot-api/substrate-bindings\"\nimport { h64 } from \"@polkadot-api/substrate-bindings\"\nimport {\n  LookupEntry,\n  MetadataPrimitives,\n  StructVar,\n  TupleVar,\n  VoidVar,\n  getLookupFn,\n} from \"./lookups\"\n\nconst textEncoder = new TextEncoder()\nconst encodeText = textEncoder.encode.bind(textEncoder)\n\nconst getChecksum = (values: Array<bigint>) => {\n  const res = new Uint8Array(values.length * 8)\n  const dv = new DataView(res.buffer)\n\n  for (let i = 0; i < values.length; i++) dv.setBigUint64(i * 8, values[i])\n\n  return h64(res)\n}\nconst getStringChecksum = (values: Array<string>) =>\n  getChecksum(values.map((v) => h64(encodeText(v))))\n\ntype Shape =\n  | \"primitive\"\n  | \"void\"\n  | \"vector\"\n  | \"tuple\"\n  | \"struct\"\n  | \"option\"\n  | \"result\"\n  | \"enum\"\nconst shapeIds: Record<Shape, bigint> = {\n  primitive: 0n,\n  vector: 1n,\n  tuple: 2n,\n  struct: 3n,\n  option: 4n,\n  result: 5n,\n  enum: 6n,\n  void: 7n,\n}\n\ntype RuntimePrimitives =\n  | \"undefined\"\n  | \"number\"\n  | \"string\"\n  | \"bigint\"\n  | \"boolean\"\n  | \"bitSequence\"\n  | \"byteSequence\"\n  | \"accountId\"\n\nconst runtimePrimitiveIds: Record<RuntimePrimitives, bigint> = {\n  undefined: 0n,\n  number: 1n,\n  string: 2n,\n  bigint: 3n,\n  boolean: 4n,\n  bitSequence: 5n, // {bitsLen: number, bytes: Uint8Array}\n  byteSequence: 6n, // Binary\n  accountId: 7n, // SS58String\n}\n\nconst metadataPrimitiveIds: Record<MetadataPrimitives, bigint> = {\n  bool: runtimePrimitiveIds.boolean,\n  char: runtimePrimitiveIds.string,\n  str: runtimePrimitiveIds.string,\n  u8: runtimePrimitiveIds.number,\n  u16: runtimePrimitiveIds.number,\n  u32: runtimePrimitiveIds.number,\n  u64: runtimePrimitiveIds.bigint,\n  u128: runtimePrimitiveIds.bigint,\n  u256: runtimePrimitiveIds.bigint,\n  i8: runtimePrimitiveIds.number,\n  i16: runtimePrimitiveIds.number,\n  i32: runtimePrimitiveIds.number,\n  i64: runtimePrimitiveIds.bigint,\n  i128: runtimePrimitiveIds.bigint,\n  i256: runtimePrimitiveIds.bigint,\n}\n\nconst structLikeBuilder = <T>(\n  shapeId: bigint,\n  input: StringRecord<T>,\n  innerChecksum: (value: T) => bigint,\n) => {\n  const sortedEntries = Object.entries(input).sort(([a], [b]) =>\n    a.localeCompare(b),\n  )\n  const keysChecksum = getStringChecksum(sortedEntries.map(([key]) => key))\n  const valuesChecksum = getChecksum(\n    sortedEntries.map(([, entry]) => innerChecksum(entry)),\n  )\n\n  return getChecksum([shapeId, keysChecksum, valuesChecksum])\n}\n\ntype Graph = Map<number, [LookupEntry, Set<number>]>\nconst buildGraph = (entry: LookupEntry, result: Graph = new Map()) => {\n  if (result.has(entry.id)) return result\n\n  switch (entry.type) {\n    case \"array\":\n    case \"option\":\n    case \"sequence\":\n      result.set(entry.id, [entry, new Set([entry.value.id])])\n      buildGraph(entry.value, result)\n      break\n    case \"enum\": {\n      const children = Object.values(entry.value).flatMap((value) => {\n        if (value.type === \"void\") return []\n        if (value.type === \"lookupEntry\") return value.value\n        if (value.type === \"struct\") return Object.values(value.value)\n        return value.value\n      })\n      result.set(entry.id, [entry, new Set(children.map((child) => child.id))])\n      children.forEach((child) => buildGraph(child, result))\n      break\n    }\n    case \"result\":\n      result.set(entry.id, [\n        entry,\n        new Set([entry.value.ok.id, entry.value.ko.id]),\n      ])\n      buildGraph(entry.value.ok, result)\n      buildGraph(entry.value.ko, result)\n      break\n    case \"struct\": {\n      const children = Object.values(entry.value)\n      result.set(entry.id, [entry, new Set(children.map((child) => child.id))])\n      children.forEach((child) => buildGraph(child, result))\n      break\n    }\n    case \"tuple\":\n      result.set(entry.id, [\n        entry,\n        new Set(entry.value.map((child) => child.id)),\n      ])\n      entry.value.forEach((child) => buildGraph(child, result))\n      break\n    default:\n      result.set(entry.id, [entry, new Set()])\n  }\n  return result\n}\n\nconst _buildChecksum = (\n  input: LookupEntry,\n  buildNextChecksum: (entry: LookupEntry) => bigint,\n): bigint => {\n  if (input.type === \"primitive\")\n    return getChecksum([shapeIds.primitive, metadataPrimitiveIds[input.value]])\n\n  if (input.type === \"void\") return getChecksum([shapeIds.void])\n\n  if (input.type === \"compact\")\n    return getChecksum([\n      shapeIds.primitive,\n      runtimePrimitiveIds[\n        input.isBig || input.isBig === null ? \"bigint\" : \"number\"\n      ],\n    ])\n\n  if (input.type === \"bitSequence\")\n    return getChecksum([shapeIds.primitive, runtimePrimitiveIds.bitSequence])\n\n  if (input.type === \"AccountId32\") {\n    return getChecksum([shapeIds.primitive, runtimePrimitiveIds.accountId])\n  }\n\n  if (input.type === \"array\") {\n    const innerValue = input.value\n    if (innerValue.type === \"primitive\" && innerValue.value === \"u8\") {\n      return getChecksum([\n        shapeIds.primitive,\n        runtimePrimitiveIds.byteSequence,\n        BigInt(input.len),\n      ])\n    }\n    const innerChecksum = buildNextChecksum(innerValue)\n\n    return getChecksum([shapeIds.vector, innerChecksum, BigInt(input.len)])\n  }\n\n  if (input.type === \"sequence\") {\n    const innerValue = input.value\n    if (innerValue.type === \"primitive\" && innerValue.value === \"u8\") {\n      return getChecksum([shapeIds.primitive, runtimePrimitiveIds.byteSequence])\n    }\n    const innerChecksum = buildNextChecksum(innerValue)\n\n    return getChecksum([shapeIds.vector, innerChecksum])\n  }\n\n  const buildTuple = (entries: LookupEntry[]) =>\n    getChecksum([shapeIds.tuple, ...entries.map(buildNextChecksum)])\n\n  const buildStruct = (entries: StringRecord<LookupEntry>) =>\n    structLikeBuilder(shapeIds.struct, entries, buildNextChecksum)\n\n  if (input.type === \"tuple\") return buildTuple(input.value)\n\n  if (input.type === \"struct\") return buildStruct(input.value)\n\n  if (input.type === \"option\")\n    return getChecksum([shapeIds.option, buildNextChecksum(input.value)])\n\n  if (input.type === \"result\")\n    return getChecksum([\n      shapeIds.result,\n      buildNextChecksum(input.value.ok),\n      buildNextChecksum(input.value.ko),\n    ])\n\n  return structLikeBuilder(shapeIds.enum, input.value, (entry) => {\n    if (entry.type === \"lookupEntry\") return buildNextChecksum(entry.value)\n    switch (entry.type) {\n      case \"void\":\n        return getChecksum([shapeIds.void])\n      case \"tuple\":\n        return buildTuple(entry.value)\n      case \"struct\":\n        return buildStruct(entry.value)\n    }\n  })\n}\n\nconst getCycles = (graph: Graph) => {\n  // Tarjan's strongly connected components\n  const tarjanState = new Map<\n    number,\n    {\n      index: number\n      lowLink: number\n      onStack: boolean\n    }\n  >()\n  let index = 0\n  const stack: number[] = []\n  const result: Array<Set<number>> = []\n\n  function strongConnect(v: number): void {\n    const state = {\n      index: index,\n      lowLink: index,\n      onStack: true,\n    }\n    tarjanState.set(v, state)\n    index++\n    stack.push(v)\n\n    const edges = graph.get(v)![1]\n    for (let w of edges) {\n      const edgeState = tarjanState.get(w)\n      if (!edgeState) {\n        strongConnect(w)\n        state.lowLink = Math.min(state.lowLink, tarjanState.get(w)!.lowLink)\n      } else if (edgeState.onStack) {\n        state.lowLink = Math.min(state.lowLink, edgeState.index)\n      }\n    }\n\n    if (state.lowLink === state.index) {\n      const component = new Set<number>()\n\n      let poppedNode = -1\n      do {\n        poppedNode = stack.pop()!\n        tarjanState.get(poppedNode)!.onStack = false\n        component.add(poppedNode)\n      } while (poppedNode !== v)\n\n      if (component.size > 1) result.push(component)\n    }\n  }\n\n  for (const node of graph.keys()) {\n    if (!tarjanState.has(node)) {\n      strongConnect(node)\n    }\n  }\n\n  return result\n}\n\nconst getCyclicGroups = (cycles: Array<Set<number>>) => {\n  const ungroupedCycles = new Set(cycles.map((_, i) => i))\n  const edges = new Map(cycles.map((_, i) => [i, new Set<number>()]))\n  cycles.forEach((cycle, i) => {\n    cycles.slice(i + 1).forEach((otherCycle, _j) => {\n      const j = _j + i + 1\n      const combined = new Set([...cycle, ...otherCycle])\n      if (combined.size !== cycle.size + otherCycle.size) {\n        edges.get(i)!.add(j)\n        edges.get(j)!.add(i)\n      }\n    })\n  })\n  const groups: Array<Set<number>> = []\n\n  while (ungroupedCycles.size) {\n    const group = new Set<number>()\n    const toVisit = [ungroupedCycles.values().next().value]\n    while (toVisit.length) {\n      const idx = toVisit.pop()\n      if (!ungroupedCycles.has(idx)) continue\n      ungroupedCycles.delete(idx)\n\n      const cycle = cycles[idx]\n      cycle.forEach((v) => group.add(Number(v)))\n      edges.get(idx)!.forEach((n) => toVisit.push(n))\n    }\n    groups.push(group)\n  }\n\n  return groups\n}\n\nconst sortCyclicGroups = (groups: Array<Set<number>>, graph: Graph) => {\n  const getReachableNodes = (group: Set<number>) => {\n    const first = group.values().next().value as number\n    const entry = graph.get(first)![0]\n    return Array.from(buildGraph(entry).keys())\n  }\n\n  const result: Array<Set<number>> = new Array()\n\n  function dependentsFirst(group: Set<number>) {\n    if (result.includes(group)) return\n    const dependents = groups.filter(\n      (candidate) =>\n        candidate !== group &&\n        getReachableNodes(group).some((node) => candidate.has(node)),\n    )\n    dependents.forEach((group) => dependentsFirst(group))\n    if (result.includes(group)) return\n    result.push(group)\n  }\n\n  groups.forEach((group) => dependentsFirst(group))\n  return result\n}\n\nconst buildChecksum = (entry: LookupEntry, cache: Map<number, bigint>) => {\n  if (cache.has(entry.id)) return cache.get(entry.id)!\n\n  const graph = buildGraph(entry)\n  const cycles = getCycles(graph)\n  const cyclicGroups = getCyclicGroups(cycles)\n  const sortedCyclicGroups = sortCyclicGroups(cyclicGroups, graph)\n\n  // separate writeCache since we might want to not override the current cache to ensure deterministic result regardless of order\n  const recursiveBuildChecksum = (\n    entry: LookupEntry,\n    writeCache: (id: number, value: bigint) => void,\n    skipCache = false,\n  ): bigint => {\n    if (!skipCache && cache.has(entry.id)) {\n      return cache.get(entry.id)!\n    }\n    const result = _buildChecksum(entry, (nextEntry) =>\n      recursiveBuildChecksum(nextEntry, writeCache),\n    )\n    writeCache(entry.id, result)\n    return result\n  }\n\n  sortedCyclicGroups.forEach((group) => {\n    group.forEach((id) => cache.set(id, 0n))\n    for (let i = 0; i < group.size; i++) {\n      const results = new Map<number, bigint>()\n      group.forEach((id) =>\n        recursiveBuildChecksum(\n          graph.get(id)![0],\n          (id, value) => {\n            // only store onto the actual cache results from other nodes\n            // cyclic nodes would depend on sorting order.\n            const writeCache = group.has(id) ? results : cache\n            writeCache.set(id, value)\n          },\n          true,\n        ),\n      )\n      Array.from(results.entries()).forEach(([id, checksum]) =>\n        cache.set(id, checksum),\n      )\n    }\n  })\n\n  return recursiveBuildChecksum(entry, (id, value) => cache.set(id, value))\n}\n\nexport const getChecksumBuilder = (metadata: V15) => {\n  const lookupData = metadata.lookup\n  const getLookupEntryDef = getLookupFn(lookupData)\n\n  const cache = new Map<number, bigint>()\n\n  const buildDefinition = (id: number): bigint =>\n    buildChecksum(getLookupEntryDef(id), cache)\n\n  const buildStorage = (pallet: string, entry: string): bigint | null => {\n    try {\n      const storageEntry = metadata.pallets\n        .find((x) => x.name === pallet)!\n        .storage!.items.find((s) => s.name === entry)!\n\n      if (storageEntry.type.tag === \"plain\")\n        return buildDefinition(storageEntry.type.value)\n\n      const { key, value } = storageEntry.type.value\n      const val = buildDefinition(value)\n      const returnKey = buildDefinition(key)\n      return getChecksum([val, returnKey])\n    } catch (_) {\n      return null\n    }\n  }\n\n  const buildRuntimeCall = (api: string, method: string): bigint | null => {\n    try {\n      const entry = metadata.apis\n        .find((x) => x.name === api)\n        ?.methods.find((x) => x.name === method)\n      if (!entry) throw null\n\n      const argNamesChecksum = getStringChecksum(\n        entry.inputs.map((x) => x.name),\n      )\n      const argValuesChecksum = getChecksum(\n        entry.inputs.map((x) => buildDefinition(x.type)),\n      )\n      const outputChecksum = buildDefinition(entry.output)\n\n      return getChecksum([argNamesChecksum, argValuesChecksum, outputChecksum])\n    } catch (_) {\n      return null\n    }\n  }\n\n  const buildComposite = (input: TupleVar | StructVar | VoidVar): bigint => {\n    if (input.type === \"void\") return getChecksum([0n])\n\n    if (input.type === \"tuple\") {\n      const values = Object.values(input.value).map((entry) =>\n        buildDefinition(entry.id),\n      )\n\n      return getChecksum([shapeIds.tuple, ...values])\n    }\n\n    // Otherwise struct\n    return structLikeBuilder(shapeIds.struct, input.value, (entry) =>\n      buildDefinition(entry.id),\n    )\n  }\n\n  const buildNamedTuple = (input: StructVar): bigint => {\n    return structLikeBuilder(shapeIds.tuple, input.value, (entry) =>\n      buildDefinition(entry.id),\n    )\n  }\n\n  const buildVariant =\n    (variantType: \"errors\" | \"events\" | \"calls\") =>\n    (pallet: string, name: string): bigint | null => {\n      try {\n        const palletEntry = metadata.pallets.find((x) => x.name === pallet)!\n        const enumLookup = getLookupEntryDef(\n          palletEntry[variantType]! as number,\n        )\n        buildDefinition(enumLookup.id)\n\n        if (enumLookup.type !== \"enum\") throw null\n        const entry = enumLookup.value[name]\n        return entry.type === \"lookupEntry\"\n          ? buildDefinition(entry.value.id)\n          : buildComposite(entry)\n      } catch (_) {\n        return null\n      }\n    }\n\n  const buildConstant = (\n    pallet: string,\n    constantName: string,\n  ): bigint | null => {\n    try {\n      const storageEntry = metadata.pallets\n        .find((x) => x.name === pallet)!\n        .constants!.find((s) => s.name === constantName)!\n\n      return buildDefinition(storageEntry.type)\n    } catch (_) {\n      return null\n    }\n  }\n\n  const toStringEnhancer =\n    <Args extends Array<any>>(\n      fn: (...args: Args) => bigint | null,\n    ): ((...args: Args) => string | null) =>\n    (...args) =>\n      fn(...args)?.toString(32) ?? null\n\n  return {\n    buildDefinition: toStringEnhancer(buildDefinition),\n    buildRuntimeCall: toStringEnhancer(buildRuntimeCall),\n    buildStorage: toStringEnhancer(buildStorage),\n    buildCall: toStringEnhancer(buildVariant(\"calls\")),\n    buildEvent: toStringEnhancer(buildVariant(\"events\")),\n    buildError: toStringEnhancer(buildVariant(\"errors\")),\n    buildConstant: toStringEnhancer(buildConstant),\n    buildComposite: toStringEnhancer(buildComposite),\n    buildNamedTuple: toStringEnhancer(buildNamedTuple),\n    getAllGeneratedChecksums: () =>\n      Array.from(cache.values()).map((v) => v.toString(32)),\n  }\n}\n"],"mappings":"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","names":["src_exports","__export","getChecksumBuilder","getDynamicBuilder","getLookupFn","__toCommonJS","getLookupFn","lookupData","lookups","from","withCache","fn","id","entry","value","isAccountId32SearchOn","getLookupEntryDef","def","path","params","allKey","values","innerDocs","x","idx","key","enumValue","enumDocs","len","v","doc","translated","scale","withCache","fn","onEnterCircular","onExitCircular","input","cache","stack","rest","id","res","result","import_utils","_bytes","_buildCodec","input","cache","stack","_accountId","scale","buildNextCodec","nextInput","buildCodec","buildVector","inner","len","innerCodec","buildTuple","value","buildStruct","key","dependencies","v","idx","indexes","x","i","withCache","res","getDynamicBuilder","metadata","lookupData","getLookupEntryDef","getLookupFn","buildDefinition","id","prefix","ss58Prefix","prefixVal","storagePallets","buildStorage","pallet","entry","storagePallet","storageEntry","s","storageWithFallback","args","result","hashers","val","hashes","hashArgs","buildEnumEntry","l","buildConstant","constantName","buildVariant","type","name","palletEntry","lookup","buildRuntimeCall","api","method","import_substrate_bindings","textEncoder","encodeText","getChecksum","values","res","dv","i","getStringChecksum","v","shapeIds","runtimePrimitiveIds","metadataPrimitiveIds","structLikeBuilder","shapeId","input","innerChecksum","sortedEntries","a","b","keysChecksum","key","valuesChecksum","entry","buildGraph","result","children","value","child","_buildChecksum","buildNextChecksum","innerValue","buildTuple","entries","buildStruct","getCycles","graph","tarjanState","index","stack","strongConnect","state","edges","w","edgeState","component","poppedNode","node","getCyclicGroups","cycles","ungroupedCycles","_","cycle","otherCycle","_j","j","groups","group","toVisit","idx","n","sortCyclicGroups","getReachableNodes","first","dependentsFirst","candidate","buildChecksum","cache","cyclicGroups","sortedCyclicGroups","recursiveBuildChecksum","writeCache","skipCache","nextEntry","id","results","checksum","getChecksumBuilder","metadata","lookupData","getLookupEntryDef","getLookupFn","buildDefinition","buildStorage","pallet","storageEntry","x","s","val","returnKey","buildRuntimeCall","api","method","argNamesChecksum","argValuesChecksum","outputChecksum","buildComposite","buildNamedTuple","buildVariant","variantType","name","palletEntry","enumLookup","buildConstant","constantName","toStringEnhancer","fn","args"]}