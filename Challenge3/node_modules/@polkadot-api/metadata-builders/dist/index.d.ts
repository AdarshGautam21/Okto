import * as scale from '@polkadot-api/substrate-bindings';
import { StringRecord, V15, Codec } from '@polkadot-api/substrate-bindings';

type MetadataPrimitives = "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
type PrimitiveVar = {
    type: "primitive";
    value: MetadataPrimitives;
};
type VoidVar = {
    type: "void";
};
type CompactVar = {
    type: "compact";
    isBig: boolean | null;
};
type BitSequenceVar = {
    type: "bitSequence";
};
type AccountId32 = {
    type: "AccountId32";
};
type TerminalVar = PrimitiveVar | VoidVar | CompactVar | BitSequenceVar | AccountId32;
type TupleVar = {
    type: "tuple";
    value: LookupEntry[];
    innerDocs: Array<string[]>;
};
type StructVar = {
    type: "struct";
    value: StringRecord<LookupEntry>;
    innerDocs: StringRecord<string[]>;
};
type EnumVar = {
    type: "enum";
    value: StringRecord<({
        type: "lookupEntry";
        value: LookupEntry;
    } | VoidVar | TupleVar | StructVar) & {
        idx: number;
    }>;
    innerDocs: StringRecord<string[]>;
};
type OptionVar = {
    type: "option";
    value: LookupEntry;
};
type ResultVar = {
    type: "result";
    value: {
        ok: LookupEntry;
        ko: LookupEntry;
    };
};
type SequenceVar = {
    type: "sequence";
    value: LookupEntry;
};
type ArrayVar = {
    type: "array";
    value: LookupEntry;
    len: number;
};
type ComposedVar = TupleVar | StructVar | SequenceVar | ArrayVar | OptionVar | ResultVar | EnumVar;
type Var = TerminalVar | ComposedVar;
type LookupEntry = {
    id: number;
} & Var;
declare const getLookupFn: (lookupData: {
    id: number;
    path: string[];
    params: {
        name: string;
        type: number | undefined;
    }[];
    def: {
        tag: "composite";
        value: {
            name: string | undefined;
            type: number;
            typeName: string | undefined;
            docs: string[];
        }[];
    } | {
        tag: "variant";
        value: {
            name: string;
            fields: {
                name: string | undefined;
                type: number;
                typeName: string | undefined;
                docs: string[];
            }[];
            index: number;
            docs: string[];
        }[];
    } | {
        tag: "sequence";
        value: number;
    } | {
        tag: "array";
        value: {
            len: number;
            type: number;
        };
    } | {
        tag: "tuple";
        value: number[];
    } | {
        tag: "primitive";
        value: {
            tag: "bool";
            value: undefined;
        } | {
            tag: "char";
            value: undefined;
        } | {
            tag: "str";
            value: undefined;
        } | {
            tag: "u8";
            value: undefined;
        } | {
            tag: "u16";
            value: undefined;
        } | {
            tag: "u32";
            value: undefined;
        } | {
            tag: "u64";
            value: undefined;
        } | {
            tag: "u128";
            value: undefined;
        } | {
            tag: "u256";
            value: undefined;
        } | {
            tag: "i8";
            value: undefined;
        } | {
            tag: "i16";
            value: undefined;
        } | {
            tag: "i32";
            value: undefined;
        } | {
            tag: "i64";
            value: undefined;
        } | {
            tag: "i128";
            value: undefined;
        } | {
            tag: "i256";
            value: undefined;
        };
    } | {
        tag: "compact";
        value: number;
    } | {
        tag: "bitSequence";
        value: {
            bitStoreType: number;
            bitOrderType: number;
        };
    };
    docs: string[];
}[]) => (id: number) => LookupEntry;

declare const getDynamicBuilder: (metadata: V15) => {
    buildDefinition: (id: number) => Codec<any>;
    buildStorage: (pallet: string, entry: string) => {
        len: number;
        fallback: unknown;
        enc: (...args: any[]) => string;
        dec: scale.Decoder<unknown>;
        keyDecoder: (value: string) => any[];
    };
    buildEvent: (pallet: string, name: string) => {
        codec: Codec<any>;
        location: [
            number,
            number
        ];
    };
    buildError: (pallet: string, name: string) => {
        codec: Codec<any>;
        location: [
            number,
            number
        ];
    };
    buildRuntimeCall: (api: string, method: string) => {
        args: Codec<any[]>;
        value: Codec<any>;
    };
    buildCall: (pallet: string, name: string) => {
        codec: Codec<any>;
        location: [
            number,
            number
        ];
    };
    buildConstant: (pallet: string, constantName: string) => Codec<any>;
    ss58Prefix: number | undefined;
};

declare const getChecksumBuilder: (metadata: V15) => {
    buildDefinition: (id: number) => string | null;
    buildRuntimeCall: (api: string, method: string) => string | null;
    buildStorage: (pallet: string, entry: string) => string | null;
    buildCall: (pallet: string, name: string) => string | null;
    buildEvent: (pallet: string, name: string) => string | null;
    buildError: (pallet: string, name: string) => string | null;
    buildConstant: (pallet: string, constantName: string) => string | null;
    buildComposite: (input: VoidVar | TupleVar | StructVar) => string | null;
    buildNamedTuple: (input: StructVar) => string | null;
    getAllGeneratedChecksums: () => string[];
};

export { type AccountId32, type ArrayVar, type BitSequenceVar, type CompactVar, type ComposedVar, type EnumVar, type LookupEntry, type MetadataPrimitives, type OptionVar, type PrimitiveVar, type ResultVar, type SequenceVar, type StructVar, type TerminalVar, type TupleVar, type Var, type VoidVar, getChecksumBuilder, getDynamicBuilder, getLookupFn };
